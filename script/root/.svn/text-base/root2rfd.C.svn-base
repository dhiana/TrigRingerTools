#include <vector>
#include <fstream>
#include <TFile.h>
#include <TChain.h>

/*
This macro will take the NTuple generated by TrigNtRinger and dump the RoI information as a RFD (text)
file, so it can be used with the command line tools of TrigCaloRinger.

Usage: root2rfd(inFile), where inFile is the name of the root file to be loaded (wildcard are accepted)
*/

void root2rfd(Char_t *inFile, Char_t *outFile)
{
  TChain *chain = new TChain("CollectionTree");
  chain->Add(inFile);
  
  vector<Float_t> *lvl1Eta = new vector<Float_t>;
  vector<Float_t> *lvl1Phi = new vector<Float_t>;
  vector<UInt_t> *lvl1Id = new vector<UInt_t>;
  vector<UInt_t> *roiId = new vector<UInt_t>;
  vector<UInt_t> *nCells = new vector<UInt_t>;
  vector<Float_t> *eta = new vector<Float_t>;
  vector<Float_t> *phi = new vector<Float_t>;
  vector<Float_t> *etaRes = new vector<Float_t>;
  vector<Float_t> *phiRes = new vector<Float_t>;
  vector<Float_t> *energy = new vector<Float_t>;
  vector<UChar_t> *layer = new vector<UChar_t>;

  chain->SetBranchStatus("*",0);  // disable all branches
  chain->SetBranchStatus("Ringer_NClusters",1);
  chain->SetBranchStatus("Ringer_Rings",1);

  chain->SetBranchStatus("Ringer_LVL1_Eta",1);
  chain->SetBranchStatus("Ringer_LVL1_Phi",1);
//  chain->SetBranchStatus("Ringer_LVL1_Id",1);
  chain->SetBranchStatus("Ringer_Roi_Id",1);
  chain->SetBranchStatus("Ringer_NCells",1);
  chain->SetBranchStatus("Ringer_EtaCells",1);
  chain->SetBranchStatus("Ringer_PhiCells",1);
  chain->SetBranchStatus("Ringer_EtaResCells",1);
  chain->SetBranchStatus("Ringer_PhiResCells",1);
  chain->SetBranchStatus("Ringer_ECells",1);
  chain->SetBranchStatus("Ringer_DetCells",1);


  chain->SetBranchAddress("Ringer_LVL1_Eta", &lvl1Eta);
  chain->SetBranchAddress("Ringer_LVL1_Phi", &lvl1Phi);
//  chain->SetBranchAddress("Ringer_LVL1_Id", &lvl1Id);
  chain->SetBranchAddress("Ringer_Roi_Id", &roiId);
  chain->SetBranchAddress("Ringer_NCells", &nCells);
  chain->SetBranchAddress("Ringer_EtaCells", &eta);
  chain->SetBranchAddress("Ringer_PhiCells", &phi);
  chain->SetBranchAddress("Ringer_EtaResCells", &etaRes);
  chain->SetBranchAddress("Ringer_PhiResCells", &phiRes);
  chain->SetBranchAddress("Ringer_ECells", &energy);
  chain->SetBranchAddress("Ringer_DetCells", &layer);


  const Int_t nevent = chain->GetEntries();
  ofstream out(outFile);
 
  UInt_t l1Val = 0;
  for (Int_t i=0; i<nevent; i++)
  {
    chain->GetEntry(i);
    UInt_t start = 0;
    for (UInt_t n=0; n<nCells->size(); n++)
    {
      out << "RoI " << roiId->at(n) << " eta: " << lvl1Eta->at(n) << " phi: " << lvl1Phi->at(n) << " LVL1 ID: " << l1Val++ << endl;
      for (UInt_t j=start; j<(start + nCells->at(n)); j++)
        out << static_cast<unsigned>((*layer)[j]) << "," <<  (*eta)[j] << "," <<  (*phi)[j] << "," << (*etaRes)[j] << "," <<  (*phiRes)[j] << ",0,0," <<  (*energy)[j] << endl;
      start += nCells->at(n);
    }
  }

  out.close();
  
  delete chain;
  delete lvl1Eta;
  delete lvl1Phi;
  delete lvl1Id;
  delete roiId;
  delete nCells;
  delete eta;
  delete phi;
  delete etaRes;
  delete phiRes;
  delete energy;
  delete layer;
}
